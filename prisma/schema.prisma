generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  password      String?
  address       String          @unique
  role          Role            @default(BUYER)
  products      Product[]       @relation("UserProducts")
  wishlist      WishlistEntry[]
  disputes      Dispute[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  SellerRequest SellerRequest[]
}

model Product {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  category    String?
  sellerId    String          @db.ObjectId
  seller      User            @relation("UserProducts", fields: [sellerId], references: [id])
  wishlisted  WishlistEntry[]
  disputes    Dispute[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model WishlistEntry {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String @db.ObjectId
  productId String @db.ObjectId

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Dispute {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String
  description String
  status      DisputeStatus @default(PENDING)
  userId      String        @db.ObjectId
  createdBy   User          @relation(fields: [userId], references: [id])
  productId   String        @db.ObjectId
  product     Product       @relation(fields: [productId], references: [id])
  createdAt   DateTime      @default(now())
  resolvedAt  DateTime?
}

enum Role {
  BUYER
  SELLER
  ADMIN
}

enum DisputeStatus {
  PENDING
  RESOLVED
  ESCALATED
}

model SellerRequest {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  userId          String        @db.ObjectId
  user            User          @relation(fields: [userId], references: [id])
  fullName        String
  businessName    String
  productCategory String
  phoneNumber     String
  emailAddress    String
  idUpload        String // Store file path or URL to uploaded ID
  businessAddress String
  status          RequestStatus @default(PENDING)
  submittedAt     DateTime      @default(now())
  reviewedAt      DateTime?
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}
